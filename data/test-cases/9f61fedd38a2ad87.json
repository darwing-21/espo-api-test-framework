{"uid":"9f61fedd38a2ad87","name":"test_update_user_with_nonexistent_user_id_returns_404","fullName":"test.users.test_put_user#test_update_user_with_nonexistent_user_id_returns_404","historyId":"d86ffcdc559e5e5c2432d8136a933838","time":{"start":1726088180132,"stop":1726088180292,"duration":160},"status":"failed","statusMessage":"AssertionError: Expected status code 404, but got 403. Response text:","statusTrace":"@pytest.mark.updateuser\n    def test_update_user_with_nonexistent_user_id_returns_404():\n        url = EndpointUser.get_user_id(\"nonexistent_id\")\n        data = create_user_data()\n        response = UserService.update_user(url, data)\n>       AssertionManager.assert_status_code_404(response)\n\ntest/users/test_put_user.py:333: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [403]>\n\n    @staticmethod\n    def assert_status_code_404(response):\n        logger.info(f\"Validating status code 404 for response with URL: {response.url}\")\n        try:\n>           assert response.status_code == 404, (\n                f\"Expected status code 404, but got {response.status_code}. Response text: {response.text}\"\n            )\nE           AssertionError: Expected status code 404, but got 403. Response text:\n\ncore/assertions/status_code_assertion.py:61: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1726088127629,"stop":1726088127646,"duration":17},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Expected status code 404, but got 403. Response text:","statusTrace":"@pytest.mark.updateuser\n    def test_update_user_with_nonexistent_user_id_returns_404():\n        url = EndpointUser.get_user_id(\"nonexistent_id\")\n        data = create_user_data()\n        response = UserService.update_user(url, data)\n>       AssertionManager.assert_status_code_404(response)\n\ntest/users/test_put_user.py:333: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [403]>\n\n    @staticmethod\n    def assert_status_code_404(response):\n        logger.info(f\"Validating status code 404 for response with URL: {response.url}\")\n        try:\n>           assert response.status_code == 404, (\n                f\"Expected status code 404, but got {response.status_code}. Response text: {response.text}\"\n            )\nE           AssertionError: Expected status code 404, but got 403. Response text:\n\ncore/assertions/status_code_assertion.py:61: AssertionError","steps":[],"attachments":[{"uid":"d00f5a8e777cd194","name":"log","source":"d00f5a8e777cd194.txt","type":"text/plain","size":2879},{"uid":"2b417be0e65bda3e","name":"stderr","source":"2b417be0e65bda3e.txt","type":"text/plain","size":3023}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"updateuser"},{"name":"parentSuite","value":"test.users"},{"name":"suite","value":"test_put_user"},{"name":"host","value":"fv-az840-814"},{"name":"thread","value":"2064-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test.users.test_put_user"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["updateuser"]},"source":"9f61fedd38a2ad87.json","parameterValues":[]}