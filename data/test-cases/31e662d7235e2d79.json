{"uid":"31e662d7235e2d79","name":"test_get_teams_with_maxsize_below_0_returns_400","fullName":"test.teams.test_get_teams#test_get_teams_with_maxsize_below_0_returns_400","historyId":"fbeccef73ce631cd5ddb2afc2bd960ae","time":{"start":1728656784802,"stop":1728656784964,"duration":162},"status":"skipped","statusMessage":"XFAIL This test case is expected to fail due to known issue.\n\nAssertionError: Expected status code 400, but got 500. Response text:","statusTrace":"setup_list_team = {'createdAt': '2024-10-11 14:26:23', 'deleted': False, 'id': '6709358fb98ad3ea0', 'layoutSetId': '6703f89e1996ee098', ...}\n\n    @pytest.mark.listteam\n    @pytest.mark.xfail(reason=\"This test case is expected to fail due to known issue.\", condition=True)\n    def test_get_teams_with_maxsize_below_0_returns_400(setup_list_team):\n        team1 = setup_list_team\n        url = EndpointTeams.get_list_team(maxSize=-1)\n        response = TeamService.get_list_team(url)\n>       AssertionManager.assert_status_code_400(response)\n\ntest/teams/test_get_teams.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [500]>\n\n    @staticmethod\n    def assert_status_code_400(response):\n        logger.info(f\"Validating status code 400 for response with URL: {response.url}\")\n        try:\n>           assert response.status_code == 400, (\n                f\"Expected status code 400, but got {response.status_code}. Response text: {response.text}\"\n            )\nE           AssertionError: Expected status code 400, but got 500. Response text:\n\ncore/assertions/status_code_assertion.py:37: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1728656773816,"stop":1728656773833,"duration":17},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup_list_team","time":{"start":1728656783608,"stop":1728656783784,"duration":176},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"skipped","statusMessage":"XFAIL This test case is expected to fail due to known issue.\n\nAssertionError: Expected status code 400, but got 500. Response text:","statusTrace":"setup_list_team = {'createdAt': '2024-10-11 14:26:23', 'deleted': False, 'id': '6709358fb98ad3ea0', 'layoutSetId': '6703f89e1996ee098', ...}\n\n    @pytest.mark.listteam\n    @pytest.mark.xfail(reason=\"This test case is expected to fail due to known issue.\", condition=True)\n    def test_get_teams_with_maxsize_below_0_returns_400(setup_list_team):\n        team1 = setup_list_team\n        url = EndpointTeams.get_list_team(maxSize=-1)\n        response = TeamService.get_list_team(url)\n>       AssertionManager.assert_status_code_400(response)\n\ntest/teams/test_get_teams.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [500]>\n\n    @staticmethod\n    def assert_status_code_400(response):\n        logger.info(f\"Validating status code 400 for response with URL: {response.url}\")\n        try:\n>           assert response.status_code == 400, (\n                f\"Expected status code 400, but got {response.status_code}. Response text: {response.text}\"\n            )\nE           AssertionError: Expected status code 400, but got 500. Response text:\n\ncore/assertions/status_code_assertion.py:37: AssertionError","steps":[],"attachments":[{"uid":"939fd45ad4f152e0","name":"log","source":"939fd45ad4f152e0.txt","type":"text/plain","size":1645},{"uid":"7be49467a28ddb4a","name":"stderr","source":"7be49467a28ddb4a.txt","type":"text/plain","size":1722}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"setup_list_team::0","time":{"start":1728656787098,"stop":1728656787333,"duration":235},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"@pytest.mark.xfail(reason='This test case is expected to fail due to known issue.', condition=True)"},{"name":"tag","value":"listteam"},{"name":"parentSuite","value":"test.teams"},{"name":"suite","value":"test_get_teams"},{"name":"host","value":"fv-az1117-459"},{"name":"thread","value":"2134-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test.teams.test_get_teams"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":["listteam","@pytest.mark.xfail(reason='This test case is expected to fail due to known issue.', condition=True)"]},"source":"31e662d7235e2d79.json","parameterValues":[]}