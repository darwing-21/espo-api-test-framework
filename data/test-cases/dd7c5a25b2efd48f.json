{"uid":"dd7c5a25b2efd48f","name":"test_create_user_with_all_required_valid_values_returns_200","fullName":"test.users.test_post_user#test_create_user_with_all_required_valid_values_returns_200","historyId":"224184b995256f76b55841ee1ab75322","time":{"start":1726088169951,"stop":1726088170099,"duration":148},"status":"failed","statusMessage":"AssertionError: Expected status code 200, but got 403. Response text:","statusTrace":"teardown_user = []\n\n    @pytest.mark.createuser\n    def test_create_user_with_all_required_valid_values_returns_200(teardown_user):\n        created_teams = teardown_user\n        url = EndpointUser.get_base_user()\n        data = create_user_data(user_type=\"regular\", is_active=False, user_name=\"ben_crack\", salutation_name=\"Mr.\",\n                                first_name=\"Darwin\", last_name=\"Garcia\", send_access_info=False)\n        AssertionManager.assert_create_user_schema_file(json.loads(data))\n        response = UserService.create_user(url, data)\n>       AssertionManager.assert_status_code_200(response)\n\ntest/users/test_post_user.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [403]>\n\n    @staticmethod\n    def assert_status_code_200(response):\n        logger.info(f\"Validating status code 200 for response with URL: {response.url}\")\n        try:\n>           assert response.status_code == 200, (\n                f\"Expected status code 200, but got {response.status_code}. Response text: {response.text}\"\n            )\nE           AssertionError: Expected status code 200, but got 403. Response text:\n\ncore/assertions/status_code_assertion.py:11: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1726088127629,"stop":1726088127646,"duration":17},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup_teardown_team","time":{"start":1726088162131,"stop":1726088162309,"duration":178},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"teardown_user","time":{"start":1726088169950,"stop":1726088169951,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Expected status code 200, but got 403. Response text:","statusTrace":"teardown_user = []\n\n    @pytest.mark.createuser\n    def test_create_user_with_all_required_valid_values_returns_200(teardown_user):\n        created_teams = teardown_user\n        url = EndpointUser.get_base_user()\n        data = create_user_data(user_type=\"regular\", is_active=False, user_name=\"ben_crack\", salutation_name=\"Mr.\",\n                                first_name=\"Darwin\", last_name=\"Garcia\", send_access_info=False)\n        AssertionManager.assert_create_user_schema_file(json.loads(data))\n        response = UserService.create_user(url, data)\n>       AssertionManager.assert_status_code_200(response)\n\ntest/users/test_post_user.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [403]>\n\n    @staticmethod\n    def assert_status_code_200(response):\n        logger.info(f\"Validating status code 200 for response with URL: {response.url}\")\n        try:\n>           assert response.status_code == 200, (\n                f\"Expected status code 200, but got {response.status_code}. Response text: {response.text}\"\n            )\nE           AssertionError: Expected status code 200, but got 403. Response text:\n\ncore/assertions/status_code_assertion.py:11: AssertionError","steps":[],"attachments":[{"uid":"1c472d6f9cc774e5","name":"log","source":"1c472d6f9cc774e5.txt","type":"text/plain","size":1717},{"uid":"7f647d338c806051","name":"stderr","source":"7f647d338c806051.txt","type":"text/plain","size":1793}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"teardown_user::0","time":{"start":1726088170107,"stop":1726088170107,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup_teardown_team::0","time":{"start":1726088180300,"stop":1726088180436,"duration":136},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"createuser"},{"name":"parentSuite","value":"test.users"},{"name":"suite","value":"test_post_user"},{"name":"host","value":"fv-az840-814"},{"name":"thread","value":"2064-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test.users.test_post_user"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["createuser"]},"source":"dd7c5a25b2efd48f.json","parameterValues":[]}