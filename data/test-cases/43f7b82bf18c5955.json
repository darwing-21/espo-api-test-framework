{"uid":"43f7b82bf18c5955","name":"test_get_teams_with_maxsize_below_0_returns_400","fullName":"test.teams.test_get_teams#test_get_teams_with_maxsize_below_0_returns_400","historyId":"fbeccef73ce631cd5ddb2afc2bd960ae","time":{"start":1726090716764,"stop":1726090716927,"duration":163},"status":"skipped","statusMessage":"XFAIL This test case is expected to fail due to known issue.\n\nAssertionError: Expected status code 400, but got 500. Response text:","statusTrace":"setup_list_team = {'createdAt': '2024-09-11 21:38:35', 'deleted': False, 'id': '66e20ddba44297867', 'layoutSetId': '66d8f8ff4f1c23bca', ...}\n\n    @pytest.mark.listteam\n    @pytest.mark.xfail(reason=\"This test case is expected to fail due to known issue.\", condition=True)\n    def test_get_teams_with_maxsize_below_0_returns_400(setup_list_team):\n        team1 = setup_list_team\n        url = EndpointTeams.get_list_team(maxSize=-1)\n        response = TeamService.get_list_team(url)\n>       AssertionManager.assert_status_code_400(response)\n\ntest/teams/test_get_teams.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [500]>\n\n    @staticmethod\n    def assert_status_code_400(response):\n        logger.info(f\"Validating status code 400 for response with URL: {response.url}\")\n        try:\n>           assert response.status_code == 400, (\n                f\"Expected status code 400, but got {response.status_code}. Response text: {response.text}\"\n            )\nE           AssertionError: Expected status code 400, but got 500. Response text:\n\ncore/assertions/status_code_assertion.py:37: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1726090705999,"stop":1726090706016,"duration":17},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup_list_team","time":{"start":1726090715513,"stop":1726090715700,"duration":187},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"skipped","statusMessage":"XFAIL This test case is expected to fail due to known issue.\n\nAssertionError: Expected status code 400, but got 500. Response text:","statusTrace":"setup_list_team = {'createdAt': '2024-09-11 21:38:35', 'deleted': False, 'id': '66e20ddba44297867', 'layoutSetId': '66d8f8ff4f1c23bca', ...}\n\n    @pytest.mark.listteam\n    @pytest.mark.xfail(reason=\"This test case is expected to fail due to known issue.\", condition=True)\n    def test_get_teams_with_maxsize_below_0_returns_400(setup_list_team):\n        team1 = setup_list_team\n        url = EndpointTeams.get_list_team(maxSize=-1)\n        response = TeamService.get_list_team(url)\n>       AssertionManager.assert_status_code_400(response)\n\ntest/teams/test_get_teams.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [500]>\n\n    @staticmethod\n    def assert_status_code_400(response):\n        logger.info(f\"Validating status code 400 for response with URL: {response.url}\")\n        try:\n>           assert response.status_code == 400, (\n                f\"Expected status code 400, but got {response.status_code}. Response text: {response.text}\"\n            )\nE           AssertionError: Expected status code 400, but got 500. Response text:\n\ncore/assertions/status_code_assertion.py:37: AssertionError","steps":[],"attachments":[{"uid":"3185f13b578a20d1","name":"log","source":"3185f13b578a20d1.txt","type":"text/plain","size":1595},{"uid":"110eadf7dd03affa","name":"stderr","source":"110eadf7dd03affa.txt","type":"text/plain","size":1664}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"setup_list_team::0","time":{"start":1726090718988,"stop":1726090719155,"duration":167},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"@pytest.mark.xfail(reason='This test case is expected to fail due to known issue.', condition=True)"},{"name":"tag","value":"listteam"},{"name":"parentSuite","value":"test.teams"},{"name":"suite","value":"test_get_teams"},{"name":"host","value":"fv-az837-91"},{"name":"thread","value":"2054-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test.teams.test_get_teams"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":["listteam","@pytest.mark.xfail(reason='This test case is expected to fail due to known issue.', condition=True)"]},"source":"43f7b82bf18c5955.json","parameterValues":[]}