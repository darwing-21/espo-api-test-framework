{"uid":"a1c6fd0f96a1f185","name":"test_negative_offset_returns_400","fullName":"test.users.test_get_users#test_negative_offset_returns_400","historyId":"6edd3d86429ec54d7789687604fb4633","time":{"start":1725941900702,"stop":1725941901022,"duration":320},"status":"skipped","statusMessage":"XFAIL This test case is expected to fail due to known issue.\n\nAssertionError: Expected status code 400, but got 500. Response text:","statusTrace":"setup_teardown_user = {'accountsIds': [], 'accountsNames': {}, 'authMethod': None, 'avatarColor': '#ef2b2b', ...}\n\n    @pytest.mark.listuser\n    @pytest.mark.xfail(reason=\"This test case is expected to fail due to known issue.\", condition=True)\n    def test_negative_offset_returns_400(setup_teardown_user):\n        user = setup_teardown_user\n        url = EndpointUser.get_list_user(offset=-1)\n        response = UserService.get_list_user(url)\n>       AssertionManager.assert_status_code_400(response)\n\ntest/users/test_get_users.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [500]>\n\n    @staticmethod\n    def assert_status_code_400(response):\n        logger.info(f\"Validating status code 400 for response with URL: {response.url}\")\n        try:\n>           assert response.status_code == 400, (\n                f\"Expected status code 400, but got {response.status_code}. Response text: {response.text}\"\n            )\nE           AssertionError: Expected status code 400, but got 500. Response text:\n\ncore/assertions/status_code_assertion.py:37: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1725941836567,"stop":1725941836584,"duration":17},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup_teardown_team","time":{"start":1725941897095,"stop":1725941897428,"duration":333},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup_teardown_user","time":{"start":1725941897428,"stop":1725941897773,"duration":345},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"skipped","statusMessage":"XFAIL This test case is expected to fail due to known issue.\n\nAssertionError: Expected status code 400, but got 500. Response text:","statusTrace":"setup_teardown_user = {'accountsIds': [], 'accountsNames': {}, 'authMethod': None, 'avatarColor': '#ef2b2b', ...}\n\n    @pytest.mark.listuser\n    @pytest.mark.xfail(reason=\"This test case is expected to fail due to known issue.\", condition=True)\n    def test_negative_offset_returns_400(setup_teardown_user):\n        user = setup_teardown_user\n        url = EndpointUser.get_list_user(offset=-1)\n        response = UserService.get_list_user(url)\n>       AssertionManager.assert_status_code_400(response)\n\ntest/users/test_get_users.py:110: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [500]>\n\n    @staticmethod\n    def assert_status_code_400(response):\n        logger.info(f\"Validating status code 400 for response with URL: {response.url}\")\n        try:\n>           assert response.status_code == 400, (\n                f\"Expected status code 400, but got {response.status_code}. Response text: {response.text}\"\n            )\nE           AssertionError: Expected status code 400, but got 500. Response text:\n\ncore/assertions/status_code_assertion.py:37: AssertionError","steps":[],"attachments":[{"uid":"60bfa651802dfd46","name":"log","source":"60bfa651802dfd46.txt","type":"text/plain","size":1973},{"uid":"48793430f3035d47","name":"stderr","source":"48793430f3035d47.txt","type":"text/plain","size":2042}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"setup_teardown_user::0","time":{"start":1725941903557,"stop":1725941903876,"duration":319},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup_teardown_team::0","time":{"start":1725941903877,"stop":1725941904179,"duration":302},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"@pytest.mark.xfail(reason='This test case is expected to fail due to known issue.', condition=True)"},{"name":"tag","value":"listuser"},{"name":"parentSuite","value":"test.users"},{"name":"suite","value":"test_get_users"},{"name":"host","value":"fv-az525-439"},{"name":"thread","value":"2086-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test.users.test_get_users"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":["@pytest.mark.xfail(reason='This test case is expected to fail due to known issue.', condition=True)","listuser"]},"source":"a1c6fd0f96a1f185.json","parameterValues":[]}