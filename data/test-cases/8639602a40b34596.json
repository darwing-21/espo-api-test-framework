{"uid":"8639602a40b34596","name":"test_order_by_valid_field_returns_200","fullName":"test.users.test_get_users#test_order_by_valid_field_returns_200","historyId":"403b7fdcccaface523e14a22f8d37122","time":{"start":1728316553018,"stop":1728316553336,"duration":318},"status":"failed","statusMessage":"AssertionError: Expected list to be ordered by 'gender' in ascending order, but got: ['Male', 'Male', 'Female'].","statusTrace":"setup_teardown_user = {'accountsIds': [], 'accountsNames': {}, 'authMethod': None, 'avatarColor': '#ef2b2b', ...}\n\n    @pytest.mark.listuser\n    def test_order_by_valid_field_returns_200(setup_teardown_user):\n        url = EndpointUser.get_list_user(select=\"gender\", orderBy=\"gender\")\n        response = UserService.get_list_user(url)\n        AssertionManager.assert_status_code_200(response)\n        AssertionManager.assert_list_select_user_schema_file(response)\n        AssertionManager.assert_list_not_empty(response)\n        AssertionManager.assert_total_greater_than_zero(response)\n>       AssertionManager.assert_list_order_ascending(response, \"gender\")\n\ntest/users/test_get_users.py:89: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>, field = 'gender'\n\n    @staticmethod\n    def assert_list_order_ascending(response, field):\n        try:\n            response_json = response.json()\n            items = response_json.get('list', [])\n    \n            values = [item.get(field).strip() for item in items if item.get(field) is not None]\n            logger.info(f\"Validating list is ordered by '{field}' in ascending order.\")\n            logger.info(f\"Values being validated: {values}\")\n>           assert values == sorted(values, key=lambda x: x.lower()), (\n                f\"Expected list to be ordered by '{field}' in ascending order, but got: {values}.\"\n            )\nE           AssertionError: Expected list to be ordered by 'gender' in ascending order, but got: ['Male', 'Male', 'Female'].\n\ncore/assertions/general_assertion.py:81: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1728316483339,"stop":1728316483355,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup_teardown_team_global","time":{"start":1728316542586,"stop":1728316542920,"duration":334},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup_teardown_user","time":{"start":1728316550311,"stop":1728316550675,"duration":364},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Expected list to be ordered by 'gender' in ascending order, but got: ['Male', 'Male', 'Female'].","statusTrace":"setup_teardown_user = {'accountsIds': [], 'accountsNames': {}, 'authMethod': None, 'avatarColor': '#ef2b2b', ...}\n\n    @pytest.mark.listuser\n    def test_order_by_valid_field_returns_200(setup_teardown_user):\n        url = EndpointUser.get_list_user(select=\"gender\", orderBy=\"gender\")\n        response = UserService.get_list_user(url)\n        AssertionManager.assert_status_code_200(response)\n        AssertionManager.assert_list_select_user_schema_file(response)\n        AssertionManager.assert_list_not_empty(response)\n        AssertionManager.assert_total_greater_than_zero(response)\n>       AssertionManager.assert_list_order_ascending(response, \"gender\")\n\ntest/users/test_get_users.py:89: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>, field = 'gender'\n\n    @staticmethod\n    def assert_list_order_ascending(response, field):\n        try:\n            response_json = response.json()\n            items = response_json.get('list', [])\n    \n            values = [item.get(field).strip() for item in items if item.get(field) is not None]\n            logger.info(f\"Validating list is ordered by '{field}' in ascending order.\")\n            logger.info(f\"Values being validated: {values}\")\n>           assert values == sorted(values, key=lambda x: x.lower()), (\n                f\"Expected list to be ordered by '{field}' in ascending order, but got: {values}.\"\n            )\nE           AssertionError: Expected list to be ordered by 'gender' in ascending order, but got: ['Male', 'Male', 'Female'].\n\ncore/assertions/general_assertion.py:81: AssertionError","steps":[],"attachments":[{"uid":"429b1381c73929f3","name":"log","source":"429b1381c73929f3.txt","type":"text/plain","size":3733},{"uid":"3fdf3ca49fe88085","name":"stderr","source":"3fdf3ca49fe88085.txt","type":"text/plain","size":3895}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"setup_teardown_user::0","time":{"start":1728316553344,"stop":1728316553662,"duration":318},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup_teardown_team_global::0","time":{"start":1728316573491,"stop":1728316573806,"duration":315},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"listuser"},{"name":"parentSuite","value":"test.users"},{"name":"suite","value":"test_get_users"},{"name":"host","value":"fv-az1535-56"},{"name":"thread","value":"2094-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test.users.test_get_users"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["listuser"]},"source":"8639602a40b34596.json","parameterValues":[]}