{"uid":"a8c6bb31cfeb35bf","name":"test_create_user_with_invalid_or_missing_is_active_defaults_to_false_returns_200","fullName":"test.users.test_post_user#test_create_user_with_invalid_or_missing_is_active_defaults_to_false_returns_200","historyId":"23f49396d0dea5face9eb409f48c96a2","time":{"start":1726090371790,"stop":1726090371929,"duration":139},"status":"failed","statusMessage":"AssertionError: Expected status code 200, but got 403. Response text:","statusTrace":"teardown_user = []\n\n    @pytest.mark.createuser\n    def test_create_user_with_invalid_or_missing_is_active_defaults_to_false_returns_200(teardown_user):\n        created_teams = teardown_user\n        url = EndpointUser.get_base_user()\n        data = create_user_data(is_active=\"unknown\")\n        response = UserService.create_user(url, data)\n>       AssertionManager.assert_status_code_200(response)\n\ntest/users/test_post_user.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [403]>\n\n    @staticmethod\n    def assert_status_code_200(response):\n        logger.info(f\"Validating status code 200 for response with URL: {response.url}\")\n        try:\n>           assert response.status_code == 200, (\n                f\"Expected status code 200, but got {response.status_code}. Response text: {response.text}\"\n            )\nE           AssertionError: Expected status code 200, but got 403. Response text:\n\ncore/assertions/status_code_assertion.py:11: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1726090329569,"stop":1726090329586,"duration":17},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"teardown_user","time":{"start":1726090371790,"stop":1726090371790,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Expected status code 200, but got 403. Response text:","statusTrace":"teardown_user = []\n\n    @pytest.mark.createuser\n    def test_create_user_with_invalid_or_missing_is_active_defaults_to_false_returns_200(teardown_user):\n        created_teams = teardown_user\n        url = EndpointUser.get_base_user()\n        data = create_user_data(is_active=\"unknown\")\n        response = UserService.create_user(url, data)\n>       AssertionManager.assert_status_code_200(response)\n\ntest/users/test_post_user.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [403]>\n\n    @staticmethod\n    def assert_status_code_200(response):\n        logger.info(f\"Validating status code 200 for response with URL: {response.url}\")\n        try:\n>           assert response.status_code == 200, (\n                f\"Expected status code 200, but got {response.status_code}. Response text: {response.text}\"\n            )\nE           AssertionError: Expected status code 200, but got 403. Response text:\n\ncore/assertions/status_code_assertion.py:11: AssertionError","steps":[],"attachments":[{"uid":"2ba94258590e3ea","name":"log","source":"2ba94258590e3ea.txt","type":"text/plain","size":1519},{"uid":"46702d9b36e1d32b","name":"stderr","source":"46702d9b36e1d32b.txt","type":"text/plain","size":1589}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"teardown_user::0","time":{"start":1726090371937,"stop":1726090371937,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"createuser"},{"name":"parentSuite","value":"test.users"},{"name":"suite","value":"test_post_user"},{"name":"host","value":"fv-az1205-438"},{"name":"thread","value":"2065-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test.users.test_post_user"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["createuser"]},"source":"a8c6bb31cfeb35bf.json","parameterValues":[]}