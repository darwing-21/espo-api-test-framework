{"uid":"54370a974639e41a","name":"test_negative_max_size_returns_400","fullName":"test.users.test_get_users#test_negative_max_size_returns_400","historyId":"442c759c1f94256f089458b272e417c0","time":{"start":1725940004480,"stop":1725940004832,"duration":352},"status":"skipped","statusMessage":"XFAIL This test case is expected to fail due to known issue.\n\nAssertionError: Expected status code 400, but got 500. Response text:","statusTrace":"setup_teardown_user = {'accountsIds': [], 'accountsNames': {}, 'authMethod': None, 'avatarColor': '#ef2b2b', ...}\n\n    @pytest.mark.listuser\n    @pytest.mark.xfail(reason=\"This test case is expected to fail due to known issue.\", condition=True)\n    def test_negative_max_size_returns_400(setup_teardown_user):\n        user = setup_teardown_user\n        url = EndpointUser.get_list_user(maxSize=-1)\n        response = UserService.get_list_user(url)\n>       AssertionManager.assert_status_code_400(response)\n\ntest/users/test_get_users.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [500]>\n\n    @staticmethod\n    def assert_status_code_400(response):\n        logger.info(f\"Validating status code 400 for response with URL: {response.url}\")\n        try:\n>           assert response.status_code == 400, (\n                f\"Expected status code 400, but got {response.status_code}. Response text: {response.text}\"\n            )\nE           AssertionError: Expected status code 400, but got 500. Response text:\n\ncore/assertions/status_code_assertion.py:37: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1725939934214,"stop":1725939934231,"duration":17},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup_teardown_team","time":{"start":1725940001178,"stop":1725940001543,"duration":365},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup_teardown_user","time":{"start":1725940001543,"stop":1725940001903,"duration":360},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"skipped","statusMessage":"XFAIL This test case is expected to fail due to known issue.\n\nAssertionError: Expected status code 400, but got 500. Response text:","statusTrace":"setup_teardown_user = {'accountsIds': [], 'accountsNames': {}, 'authMethod': None, 'avatarColor': '#ef2b2b', ...}\n\n    @pytest.mark.listuser\n    @pytest.mark.xfail(reason=\"This test case is expected to fail due to known issue.\", condition=True)\n    def test_negative_max_size_returns_400(setup_teardown_user):\n        user = setup_teardown_user\n        url = EndpointUser.get_list_user(maxSize=-1)\n        response = UserService.get_list_user(url)\n>       AssertionManager.assert_status_code_400(response)\n\ntest/users/test_get_users.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [500]>\n\n    @staticmethod\n    def assert_status_code_400(response):\n        logger.info(f\"Validating status code 400 for response with URL: {response.url}\")\n        try:\n>           assert response.status_code == 400, (\n                f\"Expected status code 400, but got {response.status_code}. Response text: {response.text}\"\n            )\nE           AssertionError: Expected status code 400, but got 500. Response text:\n\ncore/assertions/status_code_assertion.py:37: AssertionError","steps":[],"attachments":[{"uid":"7c51fda41ebfcabc","name":"log","source":"7c51fda41ebfcabc.txt","type":"text/plain","size":1971},{"uid":"6dd9fc9ed3cb37a1","name":"stderr","source":"6dd9fc9ed3cb37a1.txt","type":"text/plain","size":2040}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"setup_teardown_user::0","time":{"start":1725940008383,"stop":1725940008719,"duration":336},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup_teardown_team::0","time":{"start":1725940008719,"stop":1725940009071,"duration":352},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"@pytest.mark.xfail(reason='This test case is expected to fail due to known issue.', condition=True)"},{"name":"tag","value":"listuser"},{"name":"parentSuite","value":"test.users"},{"name":"suite","value":"test_get_users"},{"name":"host","value":"fv-az1272-901"},{"name":"thread","value":"2128-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test.users.test_get_users"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[],"tags":["@pytest.mark.xfail(reason='This test case is expected to fail due to known issue.', condition=True)","listuser"]},"source":"54370a974639e41a.json","parameterValues":[]}