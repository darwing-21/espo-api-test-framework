{"uid":"41463f11fd858e5d","name":"test_get_teams_with_empty_order_ignored_returns_200","fullName":"test.teams.test_get_teams#test_get_teams_with_empty_order_ignored_returns_200","historyId":"9c047d027cc539d3749b9d9307b027ce","time":{"start":1726751893491,"stop":1726751893698,"duration":207},"status":"failed","statusMessage":"AssertionError: Expected list to be ordered by 'name' in ascending order, but got: ['Equipo de ventas 1', 'Sales Department', 'Support', 'Team test rate', 'Team White', 'Top Management'].","statusTrace":"setup_list_team = {'createdAt': '2024-09-19 13:18:10', 'deleted': False, 'id': '66ec24929214a380d', 'layoutSetId': '66d8f8ff4f1c23bca', ...}\n\n    @pytest.mark.listteam\n    def test_get_teams_with_empty_order_ignored_returns_200(setup_list_team):\n        url = EndpointTeams.get_list_team(order=\"\")\n        response = TeamService.get_list_team(url)\n        AssertionManager.assert_status_code_200(response)\n        AssertionManager.assert_list_select_team_schema_file(response)\n        AssertionManager.assert_list_not_empty(response)\n        AssertionManager.assert_total_greater_than_zero(response)\n>       AssertionManager.assert_list_order_ascending(response, \"name\")\n\ntest/teams/test_get_teams.py:169: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>, field = 'name'\n\n    @staticmethod\n    def assert_list_order_ascending(response, field):\n        try:\n            response_json = response.json()\n            items = response_json.get('list', [])\n    \n            values = [item.get(field) for item in items if item.get(field) is not None]\n            logger.info(f\"Validating list is ordered by '{field}' in ascending order.\")\n            logger.info(f\"Values being validated: {values}\")\n>           assert values == sorted(values), (\n                f\"Expected list to be ordered by '{field}' in ascending order, but got: {values}.\"\n            )\nE           AssertionError: Expected list to be ordered by 'name' in ascending order, but got: ['Equipo de ventas 1', 'Sales Department', 'Support', 'Team test rate', 'Team White', 'Top Management'].\n\ncore/assertions/general_assertion.py:81: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1726751879949,"stop":1726751879965,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup_list_team","time":{"start":1726751890415,"stop":1726751890626,"duration":211},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Expected list to be ordered by 'name' in ascending order, but got: ['Equipo de ventas 1', 'Sales Department', 'Support', 'Team test rate', 'Team White', 'Top Management'].","statusTrace":"setup_list_team = {'createdAt': '2024-09-19 13:18:10', 'deleted': False, 'id': '66ec24929214a380d', 'layoutSetId': '66d8f8ff4f1c23bca', ...}\n\n    @pytest.mark.listteam\n    def test_get_teams_with_empty_order_ignored_returns_200(setup_list_team):\n        url = EndpointTeams.get_list_team(order=\"\")\n        response = TeamService.get_list_team(url)\n        AssertionManager.assert_status_code_200(response)\n        AssertionManager.assert_list_select_team_schema_file(response)\n        AssertionManager.assert_list_not_empty(response)\n        AssertionManager.assert_total_greater_than_zero(response)\n>       AssertionManager.assert_list_order_ascending(response, \"name\")\n\ntest/teams/test_get_teams.py:169: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [200]>, field = 'name'\n\n    @staticmethod\n    def assert_list_order_ascending(response, field):\n        try:\n            response_json = response.json()\n            items = response_json.get('list', [])\n    \n            values = [item.get(field) for item in items if item.get(field) is not None]\n            logger.info(f\"Validating list is ordered by '{field}' in ascending order.\")\n            logger.info(f\"Values being validated: {values}\")\n>           assert values == sorted(values), (\n                f\"Expected list to be ordered by '{field}' in ascending order, but got: {values}.\"\n            )\nE           AssertionError: Expected list to be ordered by 'name' in ascending order, but got: ['Equipo de ventas 1', 'Sales Department', 'Support', 'Team test rate', 'Team White', 'Top Management'].\n\ncore/assertions/general_assertion.py:81: AssertionError","steps":[],"attachments":[{"uid":"e035372b16d3afe","name":"log","source":"e035372b16d3afe.txt","type":"text/plain","size":2432},{"uid":"d184b32dc7b797b4","name":"stderr","source":"d184b32dc7b797b4.txt","type":"text/plain","size":2515}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"setup_list_team::0","time":{"start":1726751894243,"stop":1726751894416,"duration":173},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"listteam"},{"name":"parentSuite","value":"test.teams"},{"name":"suite","value":"test_get_teams"},{"name":"host","value":"fv-az842-181"},{"name":"thread","value":"2090-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test.teams.test_get_teams"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["listteam"]},"source":"41463f11fd858e5d.json","parameterValues":[]}