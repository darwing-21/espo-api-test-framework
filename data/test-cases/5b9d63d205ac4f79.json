{"uid":"5b9d63d205ac4f79","name":"test_create_user_with_invalid_default_team_id_returns_400","fullName":"test.users.test_post_user#test_create_user_with_invalid_default_team_id_returns_400","historyId":"c040a7e30cadd53d5cdb36572ec64f36","time":{"start":1726088766515,"stop":1726088766685,"duration":170},"status":"failed","statusMessage":"AssertionError: Expected status code 400, but got 403. Response text:","statusTrace":"setup_teardown_team = {'createdAt': '2024-09-11 21:05:55', 'deleted': False, 'id': '66e2063332322abb1', 'layoutSetId': '66d8f8ff4f1c23bca', ...}\n\n    @pytest.mark.createuser\n    def test_create_user_with_invalid_default_team_id_returns_400(setup_teardown_team):\n        team = setup_teardown_team\n        url = EndpointUser.get_base_user()\n        data = create_user_data(teams_ids=[team['id']], default_team_id=\"59173389930\")\n        response = UserService.create_user(url, data)\n>       AssertionManager.assert_status_code_400(response)\n\ntest/users/test_post_user.py:249: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [403]>\n\n    @staticmethod\n    def assert_status_code_400(response):\n        logger.info(f\"Validating status code 400 for response with URL: {response.url}\")\n        try:\n>           assert response.status_code == 400, (\n                f\"Expected status code 400, but got {response.status_code}. Response text: {response.text}\"\n            )\nE           AssertionError: Expected status code 400, but got 403. Response text:\n\ncore/assertions/status_code_assertion.py:37: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1726088720920,"stop":1726088720938,"duration":18},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"setup_teardown_team","time":{"start":1726088755049,"stop":1726088755228,"duration":179},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: Expected status code 400, but got 403. Response text:","statusTrace":"setup_teardown_team = {'createdAt': '2024-09-11 21:05:55', 'deleted': False, 'id': '66e2063332322abb1', 'layoutSetId': '66d8f8ff4f1c23bca', ...}\n\n    @pytest.mark.createuser\n    def test_create_user_with_invalid_default_team_id_returns_400(setup_teardown_team):\n        team = setup_teardown_team\n        url = EndpointUser.get_base_user()\n        data = create_user_data(teams_ids=[team['id']], default_team_id=\"59173389930\")\n        response = UserService.create_user(url, data)\n>       AssertionManager.assert_status_code_400(response)\n\ntest/users/test_post_user.py:249: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nresponse = <Response [403]>\n\n    @staticmethod\n    def assert_status_code_400(response):\n        logger.info(f\"Validating status code 400 for response with URL: {response.url}\")\n        try:\n>           assert response.status_code == 400, (\n                f\"Expected status code 400, but got {response.status_code}. Response text: {response.text}\"\n            )\nE           AssertionError: Expected status code 400, but got 403. Response text:\n\ncore/assertions/status_code_assertion.py:37: AssertionError","steps":[],"attachments":[{"uid":"298e8814f63eeb94","name":"log","source":"298e8814f63eeb94.txt","type":"text/plain","size":1520},{"uid":"80fdd94005bca927","name":"stderr","source":"80fdd94005bca927.txt","type":"text/plain","size":1589}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true},"afterStages":[{"name":"setup_teardown_team::0","time":{"start":1726088773376,"stop":1726088773522,"duration":146},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"createuser"},{"name":"parentSuite","value":"test.users"},{"name":"suite","value":"test_post_user"},{"name":"host","value":"fv-az1532-294"},{"name":"thread","value":"2075-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test.users.test_post_user"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["createuser"]},"source":"5b9d63d205ac4f79.json","parameterValues":[]}